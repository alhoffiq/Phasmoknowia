{"version":3,"sources":["PossibilityList.js","App.js","index.js"],"names":["PossibilityList","ghost","evidence","remainingEvidence","height","length","console","log","i","includes","push","className","style","type","App","useState","collectedEvidence","setEvidence","evidenceCount","setCount","possibilities","setPossibilities","objectives","Form","Select","display","findPossibleGhosts","possibleGhosts","ghosts","filter","every","addEvidence","document","getElementById","disabled","innerHTML","providedEvidence","findGhost","elements","querySelectorAll","id","Button","variant","onClick","reset","slice","map","possibility","strength","weakness","Label","Control","as","rows","getElementsByClassName","value","clear","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8da8d9a7.chunk.js","sourcesContent":["\r\nconst PossibilityList = function ({ ghost, evidence, length }) {\r\n    let remainingEvidence = [];\r\n    let height = 100/length + \"%\";\r\n\r\n    console.log(height)\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        switch (evidence.length) {\r\n            case 1:\r\n                if (!ghost.evidence[i].includes(evidence[0])) {\r\n                    remainingEvidence.push(ghost.evidence[i]);\r\n                }\r\n                break;\r\n            case 2:\r\n                if (!ghost.evidence[i].includes(evidence[0]) && !ghost.evidence[i].includes(evidence[1])) {\r\n                    remainingEvidence.push(ghost.evidence[i]);\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"possibility\" style={{height: height}}>\r\n            <h4>{ghost.type} - </h4>\r\n            <h5>{remainingEvidence[0]}</h5>\r\n            {remainingEvidence.length > 1 &&\r\n                <h5> - {remainingEvidence[1]}</h5>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PossibilityList","import './App.css';\nimport { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ghosts from '../src/ghosts.json';\nimport PossibilityList from '../src/PossibilityList.js';\nimport Form from 'react-bootstrap/Form';\n\nfunction App() {\n  const [collectedEvidence, setEvidence] = useState([]);\n  let [evidenceCount, setCount] = useState(0);\n  const [possibilities, setPossibilities] = useState([]);\n\n  const objectives =\n    <Form.Select className=\"info\">\n      <option style={{ display: \"none\" }}></option>\n      <option>Find evidence of paranormal activity with an EMF Reader</option>\n      <option>Capture a photo of the ghost</option>\n      <option>Detect a ghost's presence with a Motion Sensor</option>\n      <option>Prevent the ghost from hunting with a Crucifix</option>\n      <option>Have a member of your team witness a Ghost event</option>\n      <option>Cleanse the area near the ghost using Smudge Sticks</option>\n      <option>Get a Ghost to walk through Salt</option>\n      <option>Repel the Ghost with a Smudge Stick while it's chasing someone</option>\n      <option>Get the Ghost to blow out a Candle</option>\n      <option>Have a member of the team escape the Ghost during a Hunt</option>\n      <option>Get an average sanity below 25%</option>\n    </Form.Select>\n\n  function reset() {\n    setCount(0);\n    document.getElementById(\"ev1\").innerHTML = \"Evidence 1\";\n    document.getElementById(\"ev2\").innerHTML = \"Evidence 2\";\n    document.getElementById(\"ev3\").innerHTML = \"Evidence 3\";\n    document.getElementById(\"ghost\").innerHTML = \"Ghost Type\";\n    setEvidence([]);\n    setPossibilities([]);\n    let elements = document.querySelectorAll(\".evBtn\");\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].disabled = false;\n    }\n  }\n\n  function clear() {\n    const elements = document.getElementsByClassName(\"info\");\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].value = \"\";\n    }\n  }\n\n  /**\n   * \n   * @param {array} providedEvidence  Array of evidence found\n   */\n  function findGhost(providedEvidence) {\n    for (let i = 0; i < ghosts.length; i++) {\n      const ghost = ghosts[i];\n      const isPossible = providedEvidence.every(evidence => ghost.evidence.includes(evidence));\n      if (isPossible) {\n        document.getElementById(\"ghost\").innerHTML = `${ghost.type}`;\n        break;\n      } else {\n        document.getElementById(\"ghost\").innerHTML = \"None\";\n      }\n    }\n  }\n\n  /**\n * Returns list of possible ghosts given a list of found evidence\n * @param {array} providedEvidence Array of evidence found\n * @returns An array of possible ghost objects\n */\n  function findPossibleGhosts() {\n    const possibleGhosts = ghosts.filter((ghost) => {\n      const isPossible = collectedEvidence.every(evidence => ghost.evidence.includes(evidence));\n      return isPossible;\n    });\n    setPossibilities(possibleGhosts)\n  }\n  /**\n   * \n   * @param {string} evidence String of evidence selected\n   */\n  function addEvidence(evidence) {\n    document.getElementById(evidence).disabled = true;\n    switch (evidenceCount) {\n      case 0:\n        collectedEvidence.push(evidence)\n        findPossibleGhosts();\n        document.getElementById(\"ev1\").innerHTML = `${evidence}`;\n        setCount(1);\n        break;\n\n      case 1:\n        collectedEvidence.push(evidence);\n        findPossibleGhosts();\n        document.getElementById(\"ev2\").innerHTML = `${evidence}`;\n        setCount(2)\n        break;\n\n      case 2:\n        collectedEvidence.push(evidence);\n        setPossibilities([]);\n        findPossibleGhosts();\n\n        findGhost(collectedEvidence)\n\n        document.getElementById(\"ev3\").innerHTML = `${evidence}`;\n        let elements = document.querySelectorAll(\".evBtn\");\n        for (let i = 0; i < elements.length; i++) {\n          elements[i].disabled = true;\n        }\n\n        evidenceCount++;\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-2\">\n          <h4 className=\"evBox\" id=\"ev1\">Evidence 1</h4>\n        </div>\n        <div className=\"col-2\">\n          <h4 className=\"evBox\" id=\"ev2\">Evidence 2</h4>\n        </div>\n        <div className=\"col-2\">\n          <h4 className=\"evBox\" id=\"ev3\">Evidence 3</h4>\n        </div>\n        <div className=\"col-6\">\n          <h4 className=\"evBox\" id=\"ghost\" >Ghost Type</h4>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <div className=\"row\">\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" className=\"evBtn\" id=\"EMF level 5\" onClick={() => addEvidence(\"EMF level 5\")}>Emf level 5</Button>\n            </div>\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" className=\"evBtn\" id=\"Fingerprints\" onClick={() => addEvidence(\"Fingerprints\")}>Fingerprints</Button>\n            </div>\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" className=\"evBtn\" id=\"Ghost orbs\" onClick={() => addEvidence(\"Ghost orbs\")}>Ghost orbs</Button>\n            </div>\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" className=\"evBtn\" id=\"Spirit box\" onClick={() => addEvidence(\"Spirit box\")}>Spirit box</Button>\n            </div>\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" className=\"evBtn\" id=\"Ghost writing\" onClick={() => addEvidence(\"Ghost writing\")}>Ghost writing</Button>\n            </div>\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" className=\"evBtn\" id=\"Freezing temps\" onClick={() => addEvidence(\"Freezing temps\")}>Freezing temperatures</Button>\n            </div>\n            <div className=\"col-4\"></div>\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" className=\"evBtn\" id=\"D.O.T.S projector\" onClick={() => addEvidence(\"D.O.T.S projector\")}>D.O.T.S projector</Button>\n            </div>\n            <div className=\"col-4\">\n              <Button variant=\"outline-primary\" onClick={() => reset()}>Reset</Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6\">\n          <ol className=\"possibilitiesBox\">\n            {possibilities.length > 1 &&\n              possibilities.slice(0, possibilities.length).map(possibility => {\n                console.log(possibilities)\n                return (\n                  <PossibilityList\n                    key={possibility.type}\n                    ghost={possibility}\n                    evidence={collectedEvidence}\n                    length={possibilities.length}\n                  />\n                );\n              })}\n            {possibilities.length === 1 &&\n              <div className=\"attributesBox\">\n                <div className=\"strength\">\n                  <h4 className=\"attributes\">Strength: </h4>\n                  <p>{possibilities[0].strength}</p>\n                </div>\n                <div className=\"weakness\">\n                  <h4 className=\"attributes\">Weakness: </h4>\n                  <p>{possibilities[0].weakness}</p>\n                </div>\n              </div>\n            }\n            {possibilities.length === 0 && evidenceCount === 0 &&\n              <div className=\"emptyBox\">\n                <h4>Possible ghosts</h4>\n              </div>\n            }\n          </ol>\n        </div>\n      </div>\n      <div className=\"row text-center infoBox\">\n        <div className=\"col-3\">\n          <Form.Label>Ghost's Name</Form.Label>\n          <Form.Control as=\"textarea\" rows={1} className=\"info text-center\"></Form.Control>\n        </div>\n        <div className=\"col-3\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <Form.Label>Responds to</Form.Label>\n              <Form.Select className=\"info\">\n                <option style={{ display: \"none\" }}></option>\n                <option>Everyone</option>\n                <option>People alone</option>\n              </Form.Select>\n            </div>\n          </div>\n          <div className=\"row\"><pre> </pre></div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <Button variant=\"outline-primary\" id=\"clear\" onClick={() => clear()}>Clear</Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6\">\n          <Form.Label>Optional objectives</Form.Label>\n          {objectives}\n          {objectives}\n          {objectives}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}